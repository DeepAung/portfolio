---
import ModalClicker from "../subcomponents/ModalClicker.astro";
---

<div class="intro">
  <div class="left">
    <ModalClicker>
      <img
        class="my-image"
        src="/portfolio/images/hero-pic.jpg"
        alt="my-image"
        loading="lazy"
      />
    </ModalClicker>
    <div class="text-wrapper">
      <p class="text">Try Hover/Click Image</p>
    </div>
  </div>

  <div class="right grey">
    <div class="text-wrapper">
      <h3 class="text">{"{"}</h3>
    </div>
    <div class="text-wrapper">
      <h3 class="text">
        &emsp;createdBy: "<span class="blue">Ashira Aungsumal</span>"
      </h3>
    </div>
    <div class="text-wrapper">
      <h3 class="text">
        &emsp;from: "<span class="yellow">Debsirin</span>
        <span class="green">School</span>"
      </h3>
    </div>
    <div class="text-wrapper">
      <h3 class="text">
        &emsp;to: "<span class="primary" id="random-text"></span>"
      </h3>
    </div>
    <div class="text-wrapper">
      <h3 class="text">{"}"}</h3>
    </div>
  </div>
</div>

<style is:global>
  .left > :first-child {
    display: block;
    width: min-content;
    margin: 0 auto;
  }
</style>

<style>
  .intro {
    padding: 2rem min(2vw, 2rem);

    display: flex;
    flex-direction: column;
    height: 100vh;
    height: 100dvh;
  }
  .text-wrapper {
    overflow: hidden;
  }

  .right .text {
    margin-left: calc(25vw - 4rem);
    font-size: max(3vw, 0.7rem);
    font-family: "Cascadia Code Regular", monospace;
    font-weight: normal;
  }

  .left {
    position: relative;
    margin-bottom: 5rem;
  }

  .left .my-image {
    width: 75vw;
    height: auto;
    border-radius: 1rem;

    cursor: pointer;
  }

  .left p {
    text-align: center;
    margin-top: 1rem;
    z-index: 1;

    font-weight: 500;
    font-style: italic;
    color: rgb(255, 47, 47, 0.5);

    transition: color 0.25s;
  }

  .left:has(.my-image:hover) > .text-wrapper p {
    color: rgb(255, 47, 47, 1);
  }

  @media only screen and (min-width: 350px) {
    .left .my-image {
      height: 50vh;
      width: auto;
    }
  }

  @media only screen and (min-width: 800px) {
    .intro {
      display: flex;
      flex-direction: row-reverse;
      align-items: center;
      justify-content: space-around;
    }

    .left {
      margin-bottom: 0;
    }

    .left .my-image {
      height: auto;
      width: 27vw;
    }

    .left p {
      font-size: clamp(1rem, 2.5vw, 2rem);
    }

    .right .text {
      margin-left: 0;
      font-size: clamp(1rem, 2.5vw, 2rem);
    }
  }
</style>

<script>
  import gsap from "gsap";
  import { fromScrollTrigger } from "../scripts/fromScrollTrigger.ts";

  gsap.from(".intro .text-wrapper .text", {
    scrollTrigger: {
      trigger: ".right",
      toggleActions: "play none none none",
    },
    opacity: 1,
    yPercent: 100,
    stagger: 0.2,
    delay: 0.75,
    ease: "power4",
    duration: 1,
    onComplete: () => {
      startTypeRandomText();
    },
  });

  fromScrollTrigger(
    ".intro .left",
    {
      x: 500,
      delay: 0.25,
      ease: "power4",
      onComplete() {
        gsap.to(".intro .my-image", { boxShadow: "0px 0px 20px white" });
      },
      onStart() {
        gsap.to(".intro .my-image", { boxShadow: "none" });
      },
    },
    1
  );

  const myImage = document.querySelector(".my-image") as HTMLElement;

  myImage.onmousemove = (e) => {
    let [offsetX, offsetY] = getOffset(e, myImage);
    gsap.to(".intro .my-image", {
      boxShadow: `${offsetX}px ${offsetY}px 50px white`,
      duration: 0.25,
    });
  };

  myImage.onmouseleave = (e) => {
    gsap.to(".intro .my-image", {
      boxShadow: "0px 0px 20px white",
      duration: 0.5,
    });
  };

  myImage.onclick = (e) => {
    myImage.style.boxShadow = "none";
  };

  function getOffset(e: MouseEvent, element: HTMLElement) {
    let rect = element.getBoundingClientRect();
    let deltaX =
      e.pageX - (rect.left + window.scrollX + element.offsetWidth * 0.5);
    let deltaY =
      e.pageY - (rect.top + window.scrollY + element.offsetHeight * 0.5);

    let offsetX = deltaX / 10;
    let offsetY = deltaY / 10;

    return [offsetX, offsetY];
  }

  async function startTypeRandomText() {
    while (true) {
      await gsap
        .timeline({ defaults: { ease: "none" } })
        .to(".intro #random-text", { text: { value: getRandomString(8) } })
        .to(".intro #random-text", {
          text: { value: "", rtl: true },
          delay: 0.5,
        })
        .play();
    }
  }

  // random a-z and A-Z
  function getRandomString(len: number) {
    let randomNumbers = [];
    for (let i = 0; i < len; i++) {
      let randomNumber = gsap.utils.random(1, 52, 1);

      if (1 <= randomNumber && randomNumber <= 26) {
        randomNumber = "A".charCodeAt(0) + randomNumber - 1;
      } else if (27 <= randomNumber && randomNumber <= 52) {
        randomNumber = "a".charCodeAt(0) + randomNumber - 27;
      }

      randomNumbers.push(randomNumber);
    }

    console.log(
      randomNumbers,
      String.fromCharCode(...randomNumbers) + " University",
      "A".charCodeAt(0),
      "a".charCodeAt(0)
    );

    return String.fromCharCode(...randomNumbers) + " University";
  }
</script>
